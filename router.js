// Generated by CoffeeScript 1.10.0
(function() {
  var Concept, InvoiceTransactions, Promise, Receiver, Unit, fs, models;

  models = require('./database/models');

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  Concept = models.getConceptModel;

  Receiver = models.getReceiverModel;

  Unit = models.getUnitModel;

  InvoiceTransactions = models.getInvoiceTransactionModel;

  module.exports = function(app) {
    app.use(function(req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Methods", 'GET,PUT,POST,DELETE,OPTIONS');
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
      return next();
    });

    /* CONCEPTS */
    app.get('/concepts', function(req, res) {
      return Concept.findAsync().then(function(data) {
        return res.json(data);
      });
    });
    app.post('/concepts', function(req, res) {
      var concept;
      concept = new Concept({
        name: req.body.name,
        description: req.body.description,
        unit_price: req.body.unit_price,
        metric_unit: req.body.metric_unit,
        discount: req.body.discount,
        vat: req.body.vat,
        stps: req.body.stps,
        imp: req.body.imp,
        retention_vat: req.body.retention_vat,
        retention_isr: req.body.retention_isr,
        id_rfc: req.body.id_rfc
      });
      return concept.saveAsync().then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app.get('/concepts/:id', function(req, res) {
      return Concept.findOneAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json(data);
      });
    });
    app.put('/concepts/:id', function(req, res) {
      return Concept.findOneAsync({
        _id: req.params.id
      }).then(function(concept) {
        concept.name = req.body.name;
        concept.description = req.body.description;
        concept.unit_price = req.body.unit_price;
        concept.metric_unit = req.body.metric_unit;
        concept.discount = req.body.discount;
        concept.vat = req.body.vat;
        concept.stps = req.body.stps;
        concept.imp = req.body.imp;
        concept.retention_vat = req.body.retention_vat;
        concept.retention_isr = req.body.retention_isr;
        concept.id_rfc = req.body.id_rfc;
        return concept.saveAsync();
      }).then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app["delete"]('/concepts/:id', function(req, res) {
      return Concept.removeAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json({
          result: 'success'
        });
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });

    /* RECEIVERS */
    app.get('/receivers', function(req, res) {
      return Receiver.findAsync().then(function(data) {
        return res.json(data);
      });
    });
    app.post('/receivers', function(req, res) {
      var receiver;
      receiver = new Receiver({
        name: req.body.name,
        email: req.body.email,
        rfc: req.body.rfc,
        type: req.body.type,
        phone: req.body.phone,
        street: req.body.street,
        ext_number: req.body.ext_number,
        int_number: req.body.int_number,
        colony: req.body.colony,
        zip_code: req.body.zip_code,
        municipality: req.body.municipality,
        state: req.body.state,
        country: req.body.country,
        website: req.body.website,
        id_rfc: req.body.id_rfc
      });
      return receiver.saveAsync().then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app.get('/receivers/:id', function(req, res) {
      return Receiver.findOneAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json(data);
      });
    });
    app.put('/receivers/:id', function(req, res) {
      return Receiver.findOneAsync({
        _id: req.params.id
      }).then(function(receiver) {
        receiver.name = req.body.name;
        receiver.email = req.body.email;
        receiver.rfc = req.body.rfc;
        receiver.type = req.body.type;
        receiver.phone = req.body.phone;
        receiver.street = req.body.street;
        receiver.ext_number = req.body.ext_number;
        receiver.int_number = req.body.int_number;
        receiver.colony = req.body.colony;
        receiver.zip_code = req.body.zip_code;
        receiver.municipality = req.body.municipality;
        receiver.state = req.body.state;
        receiver.country = req.body.country;
        receiver.website = req.body.website;
        receiver.id_rfc = req.body.id_rfc;
        return receiver.saveAsync();
      }).then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app["delete"]('/receivers/:id', function(req, res) {
      return Receiver.removeAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json({
          result: 'success'
        });
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });

    /* UNITS */
    app.get('/units', function(req, res) {
      return Unit.findAsync().then(function(data) {
        return res.json(data);
      });
    });
    app.post('/units', function(req, res) {
      var receiver;
      receiver = new Unit({
        name: req.body.name
      });
      return receiver.saveAsync().then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app.get('/units/:id', function(req, res) {
      return Unit.findOneAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json(data);
      });
    });
    app.put('/units/:id', function(req, res) {
      return Unit.findOneAsync({
        _id: req.params.id
      }).then(function(receiver) {
        receiver.name = req.body.name;
        return receiver.saveAsync();
      }).then(function(data) {
        return res.json(data);
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });
    app["delete"]('/units/:id', function(req, res) {
      return Unit.removeAsync({
        _id: req.params.id
      }).then(function(data) {
        return res.json({
          result: 'success'
        });
      })["catch"](function(data) {
        return res.status(500).json({
          result: data
        });
      });
    });

    /* INVOICE EMULATED */
    app.get('/invoice', function(req, res) {
      return fs.readFileAsync(__dirname + "/invoices.json").then(function(data) {
        return res.json(JSON.parse(data.toString('utf8')));
      })["catch"](function(err) {
        return res.status(500).json({
          result: err
        });
      });
    });
    app.get('/invoicetransactions/:id', function(req, res) {
      return InvoiceTransactions.findAsync({
        _invoiceId: req.params.id
      }).then(function(data) {
        return res.json(data);
      })["catch"](function(err) {
        return res.status(500).json({
          result: err
        });
      });
    });
    app.post('/invoicetransactions', function(req, res) {
      var transaction;
      transaction = new InvoiceTransactions({
        amount: req.body.amount,
        reference: req.body.reference,
        _invoiceId: req.body.id
      });
      return transaction.saveAsync().then(function(data) {
        return res.json(data);
      })["catch"](function(err) {
        return res.status().json(data);
      });
    });
    return app.post('/mock', function(req, res) {
      var howLong, wait;
      wait = function() {
        var percent;
        percent = Math.random();
        if (percent < 0.1) {
          return Math.floor(Math.random() * 30000) + 10000;
        } else if (percent < 0.3) {
          return Math.floor(Math.random() * 1000) + 500;
        } else {
          return Math.floor(Math.random() * 500) + 1;
        }
      };
      howLong = wait();
      return setTimeout(function() {
        console.log('recibi', howLong);
        return res.send('OKAY!!!');
      }, howLong);
    });
  };

}).call(this);

//# sourceMappingURL=router.js.map
